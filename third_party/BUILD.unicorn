# Description:
# Unicorn is a lightweight multi-platform, multi-architecture CPU
# emulator framework.
#

licenses(["restricted"])

DEFAULT_COPTS = [
        "-DPIE",
        "-DUNICORN_HAS_ARM64",
        "-DUNICORN_HAS_X86",
        "-D_GNU_SOURCE",
        "-D_FILE_OFFSET_BITS=64",
        "-D_LARGEFILE_SOURCE",
        "-fno-strict-aliasing",
        "-Wno-vla",
]

package(
    default_visibility = ["//visibility:public"],
    # so many headers missing required includes.
    features = [
        "-parse_headers",
        "-layering_check",
    ],
)

unicorn_includes = [
  "include",
  "qemu/include",
  "qemu",
  "qemu/tcg",
]

# Force a build error when unicorn build variants are mixed.
# We cannot mix variants because each one builds uc.c with different
# preprocessor #defines, and will cause ODR violations with incompatible
# versions of functions such as uc_open().
BUILD_VARIANT_FULL = "UNICORN_BUILD_VARIANT=full_build"

BUILD_VARIANT_ARM = "UNICORN_BUILD_VARIANT=arm_only_build"

BUILD_VARIANT_X86 = "UNICORN_BUILD_VARIANT=x86_only_build"

filegroup(
    name = "unicorn-headers",
    srcs = glob(["include/unicorn/*.h"]),
)

exports_files(
    glob(["bindings/python/unicorn/*.py"]),
)

cc_library(
    name = "unicorn_qemu_common",
    srcs = [
        "qemu/accel.c",
        "qemu/glib_compat.c",
        "qemu/include/glib_compat.h",
        "qemu/target-mips/cpu-qom.h",
        "qemu/target-mips/cpu.h",
        "qemu/vl.c",
        "qemu/qemu-timer.c",
        "qemu/qemu-log.c",
        "qemu/tcg-runtime.c",
        "qemu/hw/core/qdev.c",
        "qemu/hw/core/machine.c",
        "qemu/qapi-types.c",
        "qemu/qapi-visit.c",
        "qemu/util/cutils.c",
        "qemu/util/qemu-timer-common.c",
        "qemu/util/oslib-posix.c",
        "qemu/util/qemu-thread-posix.c",
        "qemu/util/module.c",
        "qemu/util/bitmap.c",
        "qemu/util/bitops.c",
        "qemu/util/error.c",
        "qemu/util/aes.c",
        "qemu/util/crc32c.c",
        "qemu/util/host-utils.c",
        "qemu/util/getauxval.c",
    ] + glob([
        "qemu/qapi/*.c",
        "qemu/qobject/*.c",
        "qemu/qom/*.c",
    ]),
    hdrs = glob(
        [
            "include/*.h",
            "include/unicorn/*.h",
            "qemu/*.h",
            "qemu/tcg/*.h",
            "qemu/include/*.h",
            "qemu/include/*/*.h",
            "qemu/include/*/*/*.h",
        ],
        exclude = [
            "qemu/aarch64eb.h",
            "qemu/aarch64.h",
            "qemu/armeb.h",
            "qemu/arm.h",
        ],
    ) + [ "qemu/config-host.h" ],
    includes = unicorn_includes,
    copts = DEFAULT_COPTS + [
        "-Wno-unused-variable",
        "-Wno-initializer-overrides",
        "-Wno-pointer-to-int-cast",
    ],
)

# Each of these targets is going to include "tcg/i386/tcg-target.c" during the
# compilation process, and there is just no way to make bazel accept that other
# than disabling header checking. Yep, QEMU.

cc_library(
    name = "unicorn_qemu_aarch64",
    srcs = [
        "include/qemu.h",
        "include/uc_priv.h",
        # arch independent files
        "qemu/exec.c",
        "qemu/fpu/softfloat-macros.h",
        "qemu/fpu/softfloat-specialize.h",
        "qemu/include/exec/address-spaces.h",
        "qemu/include/exec/cpu-all.h",
        "qemu/include/exec/cpu-common.h",
        "qemu/include/exec/cpu_ldst.h",
        "qemu/include/exec/cputlb.h",
        "qemu/include/exec/exec-all.h",
        "qemu/include/exec/gen-icount.h",
        "qemu/include/exec/helper-tcg.h",
        "qemu/include/exec/ioport.h",
        "qemu/include/exec/memory-internal.h",
        "qemu/include/exec/memory.h",
        "qemu/include/exec/ram_addr.h",
        "qemu/include/fpu/softfloat.h",
        "qemu/include/hw/arm/arm.h",
        "qemu/include/hw/boards.h",
        "qemu/include/hw/hw.h",
        "qemu/include/hw/qdev.h",
        "qemu/include/qemu-common.h",
        "qemu/include/qemu/bswap.h",
        "qemu/include/qemu/crc32c.h",
        "qemu/include/qemu/log.h",
        "qemu/include/qemu/timer.h",
        "qemu/include/qom/cpu.h",
        "qemu/include/sysemu/cpus.h",
        "qemu/include/sysemu/memory_mapping.h",
        "qemu/include/sysemu/sysemu.h",
        "qemu/softmmu_template.h",
        "qemu/tcg/tcg-op.h",
        "qemu/tcg/tcg.h",
        "qemu/translate-all.c",
        "qemu/cpu-exec.c",
        "qemu/tcg/tcg.c",
        "qemu/tcg/optimize.c",
        "qemu/tcg/i386/tcg-target.h",
        "qemu/fpu/softfloat.c",
        "qemu/cpus.c",
        "qemu/memory.c",
        "qemu/ioport.c",
        "qemu/cputlb.c",
        "qemu/memory_mapping.c",

        # arch specific hardware files
        "qemu/hw/arm/tosa.c",
        "qemu/hw/arm/virt.c",

        # arch specific files
        "qemu/aarch64.h",
        "qemu/target-arm/cpu.c",
        "qemu/target-arm/cpu64.c",
        "qemu/target-arm/crypto_helper.c",
        "qemu/target-arm/helper-a64.c",
        "qemu/target-arm/helper.c",
        "qemu/target-arm/iwmmxt_helper.c",
        "qemu/target-arm/neon_helper.c",
        "qemu/target-arm/op_helper.c",
        "qemu/target-arm/psci.c",
        "qemu/target-arm/translate.c",
        "qemu/target-arm/translate-a64.c",
        "qemu/target-arm/unicorn_aarch64.c",
        "qemu/translate-all.h",
        "qemu/unicorn_common.h",
    ] + glob([
        "qemu/target-arm/*.h",
        "qemu/aarch64-softmmu/*.h",
    ]) + ["qemu/aarch64-softmmu/config-target.h"],
    hdrs = ["qemu/tcg/i386/tcg-target.c"],
    copts = DEFAULT_COPTS + [
        "-fno-common",
        "-fvisibility=hidden",
        "-DNEED_CPU_H",
        "-include",
        "qemu/aarch64.h",
        "-I",
        "qemu/target-arm",
        "-I",
        "qemu/aarch64-softmmu",
        "-Wno-constant-conversion",
        "-Wno-sometimes-uninitialized",
        "-Wno-return-type",
    ],
    includes = [
        "qemu/aarch64-softmmu",
        "qemu/target-arm",
        "qemu/tcg/i386",
    ],
    deps = [
        "unicorn_qemu_common",
    ],
)

cc_library(
    name = "unicorn_qemu_aarch64eb",
    srcs = [
        "include/qemu.h",
        "include/uc_priv.h",
        # arch independent files
        "qemu/exec.c",
        "qemu/fpu/softfloat-macros.h",
        "qemu/fpu/softfloat-specialize.h",
        "qemu/include/exec/address-spaces.h",
        "qemu/include/exec/cpu-all.h",
        "qemu/include/exec/cpu-common.h",
        "qemu/include/exec/cpu_ldst.h",
        "qemu/include/exec/cputlb.h",
        "qemu/include/exec/exec-all.h",
        "qemu/include/exec/gen-icount.h",
        "qemu/include/exec/helper-tcg.h",
        "qemu/include/exec/ioport.h",
        "qemu/include/exec/memory-internal.h",
        "qemu/include/exec/memory.h",
        "qemu/include/exec/ram_addr.h",
        "qemu/include/fpu/softfloat.h",
        "qemu/include/hw/arm/arm.h",
        "qemu/include/hw/boards.h",
        "qemu/include/hw/hw.h",
        "qemu/include/hw/qdev.h",
        "qemu/include/qemu-common.h",
        "qemu/include/qemu/bswap.h",
        "qemu/include/qemu/crc32c.h",
        "qemu/include/qemu/log.h",
        "qemu/include/qemu/timer.h",
        "qemu/include/qom/cpu.h",
        "qemu/include/sysemu/cpus.h",
        "qemu/include/sysemu/memory_mapping.h",
        "qemu/include/sysemu/sysemu.h",
        "qemu/softmmu_template.h",
        "qemu/tcg/tcg-op.h",
        "qemu/tcg/tcg.h",
        "qemu/translate-all.c",
        "qemu/cpu-exec.c",
        "qemu/tcg/tcg.c",
        "qemu/tcg/optimize.c",
        "qemu/tcg/i386/tcg-target.h",
        "qemu/fpu/softfloat.c",
        "qemu/cpus.c",
        "qemu/memory.c",
        "qemu/ioport.c",
        "qemu/cputlb.c",
        "qemu/memory_mapping.c",

        # arch specific hardware files
        "qemu/hw/arm/tosa.c",
        "qemu/hw/arm/virt.c",

        # arch specific files
        "qemu/aarch64eb.h",
        "qemu/target-arm/cpu.c",
        "qemu/target-arm/cpu64.c",
        "qemu/target-arm/crypto_helper.c",
        "qemu/target-arm/helper-a64.c",
        "qemu/target-arm/helper.c",
        "qemu/target-arm/iwmmxt_helper.c",
        "qemu/target-arm/neon_helper.c",
        "qemu/target-arm/op_helper.c",
        "qemu/target-arm/psci.c",
        "qemu/target-arm/translate.c",
        "qemu/target-arm/translate-a64.c",
        "qemu/target-arm/unicorn_aarch64.c",
        "qemu/translate-all.h",
        "qemu/unicorn_common.h",
    ] + glob([
        "qemu/target-arm/*.h",
        "qemu/aarch64eb-softmmu/*.h",
    ]) + ["qemu/aarch64eb-softmmu/config-target.h"],
    hdrs = ["qemu/tcg/i386/tcg-target.c"],
    copts = DEFAULT_COPTS + [
        "-fno-common",
        "-fvisibility=hidden",
        "-DNEED_CPU_H",
        "-include",
        "qemu/aarch64eb.h",
        "-I",
        "qemu/target-arm",
        "-I",
        "qemu/aarch64eb-softmmu",
        "-Wno-constant-conversion",
        "-Wno-sometimes-uninitialized",
        "-Wno-return-type",
    ],
    includes = unicorn_includes + [
        "qemu/aarch64eb-softmmu",
        "qemu/target-arm",
        "qemu/tcg/i386",
    ],
    deps = [
        "unicorn_qemu_common",
    ],
)

cc_library(
    name = "unicorn_qemu_x86_64",
    srcs = [
        "include/qemu.h",
        "include/uc_priv.h",
        # arch independent files
        "qemu/exec.c",
        "qemu/fpu/softfloat-macros.h",
        "qemu/fpu/softfloat-specialize.h",
        "qemu/include/exec/address-spaces.h",
        "qemu/include/exec/cpu-all.h",
        "qemu/include/exec/cpu-common.h",
        "qemu/include/exec/cpu_ldst.h",
        "qemu/include/exec/cputlb.h",
        "qemu/include/exec/exec-all.h",
        "qemu/include/exec/gen-icount.h",
        "qemu/include/exec/ioport.h",
        "qemu/include/exec/memory-internal.h",
        "qemu/include/exec/memory.h",
        "qemu/include/exec/ram_addr.h",
        "qemu/include/fpu/softfloat.h",
        "qemu/include/hw/boards.h",
        "qemu/include/hw/cpu/icc_bus.h",
        "qemu/include/hw/hw.h",
        "qemu/include/hw/i386/apic.h",
        "qemu/include/hw/i386/apic_internal.h",
        "qemu/include/hw/i386/pc.h",
        "qemu/include/hw/qdev.h",
        "qemu/include/qemu-common.h",
        "qemu/include/qemu/bswap.h",
        "qemu/include/qemu/log.h",
        "qemu/include/qemu/timer.h",
        "qemu/include/qom/cpu.h",
        "qemu/include/sysemu/cpus.h",
        "qemu/include/sysemu/memory_mapping.h",
        "qemu/include/sysemu/sysemu.h",
        "qemu/softmmu_template.h",
        "qemu/target-arm/cpu-qom.h",
        "qemu/target-arm/cpu.h",
        "qemu/tcg/tcg-op.h",
        "qemu/tcg/tcg.h",
        "qemu/translate-all.c",
        "qemu/cpu-exec.c",
        "qemu/tcg/tcg.c",
        "qemu/tcg/optimize.c",
        "qemu/fpu/softfloat.c",
        "qemu/cpus.c",
        "qemu/memory.c",
        "qemu/ioport.c",
        "qemu/cputlb.c",
        "qemu/memory_mapping.c",

        # arch specific hardware files
        "qemu/hw/intc/apic.c",
        "qemu/hw/intc/apic_common.c",
        "qemu/hw/i386/pc.c",
        "qemu/hw/i386/pc_piix.c",

        # backend files
        "qemu/tcg/i386/tcg-target.h",
        "qemu/translate-all.h",
        "qemu/unicorn_common.h",
    ] + glob([
        "qemu/target-i386/*.c",
        "qemu/target-i386/*.h",
        "qemu/x86_64-softmmu/*.h",
    ]) + ["qemu/x86_64-softmmu/config-target.h"],
    hdrs = ["qemu/tcg/i386/tcg-target.c"],
    copts = DEFAULT_COPTS + [
        "-fno-common",
        "-fvisibility=hidden",
        "-DNEED_CPU_H",
        "-include",
        "qemu/x86_64.h",
        "-I",
        "qemu/target-i386",
        "-I",
        "qemu/x86_64-softmmu",
        "-Wno-constant-conversion",
    ],
    includes = unicorn_includes + [
        "qemu/target-i386",
        "qemu/x86_64-softmmu",
        "qemu/tcg/i386",
    ],
    deps = [
        "unicorn_qemu_common",
    ],
)

cc_library(
    name = "unicorn_arm64",
    srcs = [
        "list.c",
        "include/list.h",
        "uc.c",
    ] + glob([
        "qemu/target-*/unicorn.h",
        "qemu/aarch64-softmmu/config-target.h",
    ]),
    hdrs = [":unicorn-headers"],
    include_prefix = "third_party",
    strip_include_prefix = "include",
    copts = DEFAULT_COPTS + [
        "-UUNICORN_HAS_ARM",
        "-UUNICORN_HAS_ARMEB",
        "-UUNICORN_HAS_M68K",
        "-UUNICORN_HAS_MIPS",
        "-UUNICORN_HAS_MIPS64",
        "-UUNICORN_HAS_MIPS64EL",
        "-UUNICORN_HAS_MIPSEL",
        "-UUNICORN_HAS_SPARC",
        "-UUNICORN_HAS_X86",
    ],
    defines = [
        BUILD_VARIANT_ARM,
    ],
    includes = unicorn_includes,
    deps = [
        ":unicorn_qemu_aarch64",
        ":unicorn_qemu_aarch64eb",
    ],
)

cc_library(
    name = "unicorn_x86",
    srcs = [
        "list.c",
        "include/list.h",
        "uc.c",
    ] + glob([
        "qemu/target-*/unicorn.h",
    ]),
    hdrs = [":unicorn-headers"],
    include_prefix = "third_party",
    strip_include_prefix = "include",
    copts = DEFAULT_COPTS + [
        "-UUNICORN_HAS_ARM",
        "-UUNICORN_HAS_ARM64",
        "-UUNICORN_HAS_ARMEB",
        "-UUNICORN_HAS_M68K",
        "-UUNICORN_HAS_MIPS",
        "-UUNICORN_HAS_MIPS64",
        "-UUNICORN_HAS_MIPS64EL",
        "-UUNICORN_HAS_MIPSEL",
        "-UUNICORN_HAS_SPARC",
    ],
    defines = [
        BUILD_VARIANT_X86,
    ],
    includes = unicorn_includes,
    deps = [
        ":unicorn_qemu_x86_64",
    ],
)

# Ideally we should run cmake to generate these files in build time.
genrule(
  name = "gen_qemu_config_host_h",
  outs = ["qemu/config-host.h"],
  cmd = """cat - > $@ <<'EOF'
/* Automatically generated by create_config - do not modify */
#define HOST_X86_64 1
#define CONFIG_POSIX 1
#define CONFIG_LINUX 1
#define CONFIG_BYTESWAP_H 1
#define CONFIG_CPUID_H 1
#define CONFIG_INT128 1
EOF""")

genrule(
  name = "gen_qemu_x86_64_config_target_h",
  outs = ["qemu/x86_64-softmmu/config-target.h"],
  cmd = """cat - > $@ <<'EOF'
/* Automatically generated by create_config - do not modify */
#define TARGET_X86_64 1
#define TARGET_NAME "x86_64"
#define TARGET_I386 1
#define CONFIG_SOFTMMU 1
EOF""")

genrule(
  name = "gen_qemu_aarch64_config_target_h",
  outs = ["qemu/aarch64-softmmu/config-target.h"],
  cmd = """cat - > $@ <<'EOF'
/* Automatically generated by create_config - do not modify */
#define TARGET_AARCH64 1
#define TARGET_NAME "aarch64"
#define TARGET_ARM 1
#define CONFIG_SOFTMMU 1
EOF""")

genrule(
  name = "gen_qemu_aarch64eb_config_target_h",
  outs = ["qemu/aarch64eb-softmmu/config-target.h"],
  cmd = """cat - > $@ <<'EOF'
/* Automatically generated by create_config - do not modify */
#define TARGET_AARCH64 1
#define TARGET_NAME "aarch64eb"
#define TARGET_ARM 1
#define TARGET_WORDS_BIGENDIAN 1
#define CONFIG_SOFTMMU 1
EOF""")
